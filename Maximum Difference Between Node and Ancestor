/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
//     int solve(TreeNode* root,int ans)
//     {
//         if(!root)
//             return ans;
//         if(root->left == nullptr && root->right == nullptr)
//             return root->val;
//         int current_min = min(solve(root->left,ans),solve(root->right,ans));
//         ans = max(ans,abs(root->val-current_min));
//         cout<<" ans for "<<root->val<<" is "<<abs(root->val-current_min)<<"\n";
//         return current_min;
        
//     }
//     int maxAncestorDiff(TreeNode* root) {
//         int ans = INT_MIN;
//         solve(root,ans);
//         return ans;
//     }
    
    int maxAncestorDiff(TreeNode* root, int minVal, int maxVal){
        if(root==nullptr){
            return maxVal-minVal;
        }
        minVal=min(minVal, root->val);
        maxVal=max(maxVal, root->val);
        return max(maxAncestorDiff(root->left, minVal, maxVal), maxAncestorDiff(root->right, minVal, maxVal));
    }
    int maxAncestorDiff(TreeNode* root) {
        if(root==nullptr) return 0;
        return maxAncestorDiff(root, 1e6, 0);   
    }
    
    
    
};
