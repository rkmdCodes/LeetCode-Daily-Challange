class RandomizedSet {
    vector <int> vec;
    unordered_map <int , int > v;
public:
    RandomizedSet() {
    
    }
    
    bool insert(int val) {
        if(v.find(val) != v.end())
            return false;
        vec.push_back(val);
        v[val] = vec.size()-1;
        return true;
    }
    
    bool remove(int val) {
        if(v.find(val) == v.end())
            return false;
        unordered_map<int,int>::iterator it=v.find(val);
        vec[it->second] = vec.back();
        vec.pop_back();
        v[vec[it->second]] = it->second;
        v.erase(val);
        return true;
    }
    
    int getRandom() {
        return vec[rand()%vec.size()];
    }
};

/**
 * Your RandomizedSet object will be instantiated and called as such:
 * RandomizedSet* obj = new RandomizedSet();
 * bool param_1 = obj->insert(val);
 * bool param_2 = obj->remove(val);
 * int param_3 = obj->getRandom();
 */
